{"version":3,"file":"zetapush-angular.umd.min.js","sources":["../../out-tsc/lib/src/api.ts","../../out-tsc/lib/src/di.ts","../../out-tsc/lib/src/core.ts","../../out-tsc/lib/src/zetapush.module.ts"],"sourcesContent":["import { NgZone } from '@angular/core';\n\nimport { services } from 'zetapush-js';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/publish';\n\nimport { ZetaPushClient } from './core';\n\nconst /** @type {?} */ toPascalCase = (word = '') => `${word.charAt(0).toUpperCase()}${word.substring(1)}`;\n\nconst /** @type {?} */ getExtensionsAndListener = (Class: any, zone: NgZone) => {\n  const /** @type {?} */ filter = (element: string) => element !== 'constructor';\n  const /** @type {?} */ methods = Object.getOwnPropertyNames(Class.prototype).filter(filter);\n  const /** @type {?} */ extensions = {};\n  const /** @type {?} */ listener = methods.reduce((reducer, method) => {\n    const /** @type {?} */ source = new Observable((observer) => {\n      reducer[method] = ({ data }: { data: { errors: Array<any>, result: any } }) => {\n        console.log(`Api::on${toPascalCase(method)}`, data);\n        zone.run(() => {\n          const { errors, result } = data;\n          if (errors.length) {\n            observer.error(result);\n          } else {\n            observer.next(result);\n          }\n        });\n      };\n    });\n    const /** @type {?} */ published = source.publish();\n    extensions[`on${toPascalCase(method)}`] = published;\n    published.connect();\n    return reducer;\n  }, {});\n  return { extensions , listener };\n};\n\nexport interface ApiError {\n  code: string;\n  location: string;\n  message: string;\n}\nexport class Api extends services.Macro {\n/**\n * @return {?}\n */\n$getUserId(): string {\n    return '<abstract>';\n  }\n}\n/**\n * @param {?} client\n * @param {?} zone\n * @param {?} Api\n * @return {?}\n */\nexport function createApi(client: ZetaPushClient, zone: NgZone, Api: any) {\n  const { extensions , listener } = getExtensionsAndListener(Api, zone);\n  const /** @type {?} */ api = client.createAsyncMacroService({\n    Type: Api,\n    listener\n  });\n  const /** @type {?} */ $publish = api.$publish;\n  api.$publish = (method: string, parameters: any, hardFail?: boolean, debug?: number) => new Promise<any>((resolve, reject) => {\n    console.warn(`Api::${method}`, parameters);\n    const /** @type {?} */ onSuccess = (message: any) => zone.run(() => resolve(message));\n    const /** @type {?} */ onError = (errors: any) => zone.run(() => reject(errors));\n    $publish(method, parameters, hardFail, debug).then(onSuccess, onError);\n  });\n  return /** @type {?} */(( Object.assign(api, extensions, {\n    $getUserId: () => client.getUserId()\n  }) as Api));\n}\n","import { InjectionToken } from '@angular/core';\nimport { ClientOptions } from 'zetapush-js';\nimport { ZetaPushClient, ZetaPushConnection } from './core';\n\nexport const /** @type {?} */ ZetaPushClientConfig = new InjectionToken<ClientOptions>('ZetaPushClientConfig');\n/**\n * @param {?} config\n * @return {?}\n */\nexport function ZetaPushClientFactory(config: ClientOptions): ZetaPushClient {\n  return new ZetaPushClient(config);\n}\n/**\n * @param {?} client\n * @return {?}\n */\nexport function ZetaPushConnectionFactory(client: ZetaPushClient): ZetaPushConnection {\n  return new ZetaPushConnection(client);\n}\n","import { Authentication, SmartClient, ClientOptions } from 'zetapush-js';\n\nconst /** @type {?} */ ZETAPUSH_DELEGATING_TOKEN_KEY = 'ServicesAuthToken';\nexport class ZetaPushClient extends SmartClient {\n/**\n * @param {?} options\n */\nconstructor(options: ClientOptions) {\n    super(options);\n\n    const { authentication } = this.helper;\n    this.helper.authentication = () => {\n      const token = this.getDelegateToken();\n      if (token) {\n        return Authentication.delegating({ token });\n      } else {\n        return authentication();\n      }\n    };\n  }\n/**\n * @return {?}\n */\ngetDelegateToken() {\n    return localStorage.getItem(ZETAPUSH_DELEGATING_TOKEN_KEY);\n  }\n}\nexport class ZetaPushConnection {\n/**\n * @param {?} client\n */\nconstructor(\nprivate client: ZetaPushClient\n    ) {\n  }\n/**\n * @return {?}\n */\ndisconnect(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const { client } = this;\n      const /** @type {?} */ handlers: Array<any> = [];\n      if (client.isConnected()) {\n        const /** @type {?} */ onConnectionClosed = () => {\n          console.log('ZetaPushConnection::onConnectionClosed');\n          // Remove connection status listener\n          handlers.forEach((handler) => {\n            client.removeConnectionStatusListener(handler);\n          });\n          // Resolve disconnection\n          resolve();\n        };\n        handlers.push(client.onConnectionClosed(onConnectionClosed));\n        // Disconnect client\n        client.disconnect();\n      } else {\n        // Resolve disconnection\n        resolve();\n      }\n    });\n  }\n/**\n * @param {?=} credentials\n * @return {?}\n */\nconnect(credentials: any = {}): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const { client } = this;\n      const /** @type {?} */ handlers: Array<any> = [];\n      client.setCredentials(credentials);\n      this.disconnect().then(() => {\n        const /** @type {?} */ onFailedHandshake = (error: any) => {\n          console.log('ZetaPushConnection::onFailedHandshake', error);\n          // Remove connection status listener\n          handlers.forEach((handler) => {\n            client.removeConnectionStatusListener(handler);\n          });\n          // Reconnect client via weak auth\n          client.connect();\n          // Reject connection\n          reject();\n        };\n        const /** @type {?} */ onConnectionEstablished = () => {\n          console.log('ZetaPushConnection::onConnectionEstablished');\n          // Remove connection status listener\n          handlers.forEach((handler) => {\n            client.removeConnectionStatusListener(handler);\n          });\n          // Resolve connection success\n          resolve();\n        };\n        // Handle connection success and fail\n        handlers.push(client.onConnectionEstablished(onConnectionEstablished));\n        handlers.push(client.onFailedHandshake(onFailedHandshake));\n        // Connect client to ZetaPush backend\n        client.connect();\n      });\n    });\n  }\n}\n\nfunction ZetaPushConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nZetaPushConnection.prototype.client;\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { ZetaPushClient, ZetaPushConnection } from './core';\nimport { ZetaPushClientConfig, ZetaPushClientFactory, ZetaPushConnectionFactory } from './di';\nexport class ZetaPushModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: ZetaPushClient, useFactory: ZetaPushClientFactory, deps: [ ZetaPushClientConfig ] },\n    { provide: ZetaPushConnection, useFactory: ZetaPushConnectionFactory, deps: [ ZetaPushClient ] }\n  ],\n  bootstrap: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ZetaPushModule_tsickle_Closure_declarations() {\n/** @type {?} */\nZetaPushModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nZetaPushModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["client","zone","Api","_a","extensions","listener","api","createAsyncMacroService","Type","$publish","method","parameters","hardFail","debug","Promise","resolve","reject","console","warn","onSuccess","message","run","onError","errors","then","Object","assign","$getUserId","getUserId","config","ZetaPushClient","ZetaPushConnection","toPascalCase","word","charAt","toUpperCase","substring","getExtensionsAndListener","Class","filter","element","methods","getOwnPropertyNames","prototype","reduce","reducer","source","Observable","observer","data","log","result","length","error","next","published","publish","connect","__extends","services","Macro","options","_super","authentication","_this","helper","token","getDelegateToken","Authentication","delegating","localStorage","getItem","SmartClient","this","handlers","isConnected","onConnectionClosed","forEach","handler","removeConnectionStatusListener","push","disconnect","credentials","setCredentials","onFailedHandshake","onConnectionEstablished","ZetaPushClientConfig","InjectionToken","type","NgModule","args","declarations","imports","providers","provide","useFactory","ZetaPushClientFactory","deps","ZetaPushConnectionFactory","bootstrap","ZetaPushModule"],"mappings":"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"}