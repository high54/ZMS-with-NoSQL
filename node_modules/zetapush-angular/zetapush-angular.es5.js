import { Authentication, SmartClient, services } from 'zetapush-js';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/publish';
import { InjectionToken, NgModule } from '@angular/core';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var toPascalCase = function (word) {
    if (word === void 0) { word = ''; }
    return "" + word.charAt(0).toUpperCase() + word.substring(1);
};
var getExtensionsAndListener = function (Class, zone) {
    var /** @type {?} */ filter = function (element) { return element !== 'constructor'; };
    var /** @type {?} */ methods = Object.getOwnPropertyNames(Class.prototype).filter(filter);
    var /** @type {?} */ extensions = {};
    var /** @type {?} */ listener = methods.reduce(function (reducer, method) {
        var /** @type {?} */ source = new Observable(function (observer) {
            reducer[method] = function (_a) {
                var data = _a.data;
                console.log("Api::on" + toPascalCase(method), data);
                zone.run(function () {
                    var errors = data.errors, result = data.result;
                    if (errors.length) {
                        observer.error(result);
                    }
                    else {
                        observer.next(result);
                    }
                });
            };
        });
        var /** @type {?} */ published = source.publish();
        extensions["on" + toPascalCase(method)] = published;
        published.connect();
        return reducer;
    }, {});
    return { extensions: extensions, listener: listener };
};
var Api = (function (_super) {
    __extends(Api, _super);
    function Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    Api.prototype.$getUserId = function () {
        return '<abstract>';
    };
    return Api;
}(services.Macro));
/**
 * @param {?} client
 * @param {?} zone
 * @param {?} Api
 * @return {?}
 */
function createApi(client, zone, Api) {
    var _a = getExtensionsAndListener(Api, zone), extensions = _a.extensions, listener = _a.listener;
    var /** @type {?} */ api = client.createAsyncMacroService({
        Type: Api,
        listener: listener
    });
    var /** @type {?} */ $publish = api.$publish;
    api.$publish = function (method, parameters, hardFail, debug) { return new Promise(function (resolve, reject) {
        console.warn("Api::" + method, parameters);
        var /** @type {?} */ onSuccess = function (message) { return zone.run(function () { return resolve(message); }); };
        var /** @type {?} */ onError = function (errors) { return zone.run(function () { return reject(errors); }); };
        $publish(method, parameters, hardFail, debug).then(onSuccess, onError);
    }); };
    return (Object.assign(api, extensions, {
        $getUserId: function () { return client.getUserId(); }
    }));
}

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ZETAPUSH_DELEGATING_TOKEN_KEY = 'ServicesAuthToken';
var ZetaPushClient = (function (_super) {
    __extends$1(ZetaPushClient, _super);
    /**
     * @param {?} options
     */
    function ZetaPushClient(options) {
        var _this = _super.call(this, options) || this;
        var authentication = _this.helper.authentication;
        _this.helper.authentication = function () {
            var token = _this.getDelegateToken();
            if (token) {
                return Authentication.delegating({ token: token });
            }
            else {
                return authentication();
            }
        };
        return _this;
    }
    /**
     * @return {?}
     */
    ZetaPushClient.prototype.getDelegateToken = function () {
        return localStorage.getItem(ZETAPUSH_DELEGATING_TOKEN_KEY);
    };
    return ZetaPushClient;
}(SmartClient));
var ZetaPushConnection = (function () {
    /**
     * @param {?} client
     */
    function ZetaPushConnection(client) {
        this.client = client;
    }
    /**
     * @return {?}
     */
    ZetaPushConnection.prototype.disconnect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var client = _this.client;
            var /** @type {?} */ handlers = [];
            if (client.isConnected()) {
                var /** @type {?} */ onConnectionClosed = function () {
                    console.log('ZetaPushConnection::onConnectionClosed');
                    // Remove connection status listener
                    handlers.forEach(function (handler) {
                        client.removeConnectionStatusListener(handler);
                    });
                    // Resolve disconnection
                    resolve();
                };
                handlers.push(client.onConnectionClosed(onConnectionClosed));
                // Disconnect client
                client.disconnect();
            }
            else {
                // Resolve disconnection
                resolve();
            }
        });
    };
    /**
     * @param {?=} credentials
     * @return {?}
     */
    ZetaPushConnection.prototype.connect = function (credentials) {
        var _this = this;
        if (credentials === void 0) { credentials = {}; }
        return new Promise(function (resolve, reject) {
            var client = _this.client;
            var /** @type {?} */ handlers = [];
            client.setCredentials(credentials);
            _this.disconnect().then(function () {
                var /** @type {?} */ onFailedHandshake = function (error) {
                    console.log('ZetaPushConnection::onFailedHandshake', error);
                    // Remove connection status listener
                    handlers.forEach(function (handler) {
                        client.removeConnectionStatusListener(handler);
                    });
                    // Reconnect client via weak auth
                    client.connect();
                    // Reject connection
                    reject();
                };
                var /** @type {?} */ onConnectionEstablished = function () {
                    console.log('ZetaPushConnection::onConnectionEstablished');
                    // Remove connection status listener
                    handlers.forEach(function (handler) {
                        client.removeConnectionStatusListener(handler);
                    });
                    // Resolve connection success
                    resolve();
                };
                // Handle connection success and fail
                handlers.push(client.onConnectionEstablished(onConnectionEstablished));
                handlers.push(client.onFailedHandshake(onFailedHandshake));
                // Connect client to ZetaPush backend
                client.connect();
            });
        });
    };
    return ZetaPushConnection;
}());

var ZetaPushClientConfig = new InjectionToken('ZetaPushClientConfig');
/**
 * @param {?} config
 * @return {?}
 */
function ZetaPushClientFactory(config) {
    return new ZetaPushClient(config);
}
/**
 * @param {?} client
 * @return {?}
 */
function ZetaPushConnectionFactory(client) {
    return new ZetaPushConnection(client);
}

var ZetaPushModule = (function () {
    function ZetaPushModule() {
    }
    return ZetaPushModule;
}());
ZetaPushModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [],
                providers: [
                    { provide: ZetaPushClient, useFactory: ZetaPushClientFactory, deps: [ZetaPushClientConfig] },
                    { provide: ZetaPushConnection, useFactory: ZetaPushConnectionFactory, deps: [ZetaPushClient] }
                ],
                bootstrap: []
            },] },
];
/**
 * @nocollapse
 */
ZetaPushModule.ctorParameters = function () { return []; };

/**
 * Generated bundle index. Do not edit.
 */

export { Api, createApi, ZetaPushConnection, ZetaPushClient, ZetaPushClientConfig, ZetaPushModule, ZetaPushClientFactory as ɵa, ZetaPushConnectionFactory as ɵb };
//# sourceMappingURL=zetapush-angular.es5.js.map
