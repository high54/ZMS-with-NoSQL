import { Authentication, SmartClient, services } from 'zetapush-js';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/publish';
import { InjectionToken, NgModule } from '@angular/core';

const toPascalCase = (word = '') => `${word.charAt(0).toUpperCase()}${word.substring(1)}`;
const getExtensionsAndListener = (Class, zone) => {
    const /** @type {?} */ filter = (element) => element !== 'constructor';
    const /** @type {?} */ methods = Object.getOwnPropertyNames(Class.prototype).filter(filter);
    const /** @type {?} */ extensions = {};
    const /** @type {?} */ listener = methods.reduce((reducer, method) => {
        const /** @type {?} */ source = new Observable((observer) => {
            reducer[method] = ({ data }) => {
                console.log(`Api::on${toPascalCase(method)}`, data);
                zone.run(() => {
                    const { errors, result } = data;
                    if (errors.length) {
                        observer.error(result);
                    }
                    else {
                        observer.next(result);
                    }
                });
            };
        });
        const /** @type {?} */ published = source.publish();
        extensions[`on${toPascalCase(method)}`] = published;
        published.connect();
        return reducer;
    }, {});
    return { extensions, listener };
};
class Api extends services.Macro {
    /**
     * @return {?}
     */
    $getUserId() {
        return '<abstract>';
    }
}
/**
 * @param {?} client
 * @param {?} zone
 * @param {?} Api
 * @return {?}
 */
function createApi(client, zone, Api) {
    const { extensions, listener } = getExtensionsAndListener(Api, zone);
    const /** @type {?} */ api = client.createAsyncMacroService({
        Type: Api,
        listener
    });
    const /** @type {?} */ $publish = api.$publish;
    api.$publish = (method, parameters, hardFail, debug) => new Promise((resolve, reject) => {
        console.warn(`Api::${method}`, parameters);
        const /** @type {?} */ onSuccess = (message) => zone.run(() => resolve(message));
        const /** @type {?} */ onError = (errors) => zone.run(() => reject(errors));
        $publish(method, parameters, hardFail, debug).then(onSuccess, onError);
    });
    return (Object.assign(api, extensions, {
        $getUserId: () => client.getUserId()
    }));
}

const ZETAPUSH_DELEGATING_TOKEN_KEY = 'ServicesAuthToken';
class ZetaPushClient extends SmartClient {
    /**
     * @param {?} options
     */
    constructor(options) {
        super(options);
        const { authentication } = this.helper;
        this.helper.authentication = () => {
            const token = this.getDelegateToken();
            if (token) {
                return Authentication.delegating({ token });
            }
            else {
                return authentication();
            }
        };
    }
    /**
     * @return {?}
     */
    getDelegateToken() {
        return localStorage.getItem(ZETAPUSH_DELEGATING_TOKEN_KEY);
    }
}
class ZetaPushConnection {
    /**
     * @param {?} client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @return {?}
     */
    disconnect() {
        return new Promise((resolve, reject) => {
            const { client } = this;
            const /** @type {?} */ handlers = [];
            if (client.isConnected()) {
                const /** @type {?} */ onConnectionClosed = () => {
                    console.log('ZetaPushConnection::onConnectionClosed');
                    // Remove connection status listener
                    handlers.forEach((handler) => {
                        client.removeConnectionStatusListener(handler);
                    });
                    // Resolve disconnection
                    resolve();
                };
                handlers.push(client.onConnectionClosed(onConnectionClosed));
                // Disconnect client
                client.disconnect();
            }
            else {
                // Resolve disconnection
                resolve();
            }
        });
    }
    /**
     * @param {?=} credentials
     * @return {?}
     */
    connect(credentials = {}) {
        return new Promise((resolve, reject) => {
            const { client } = this;
            const /** @type {?} */ handlers = [];
            client.setCredentials(credentials);
            this.disconnect().then(() => {
                const /** @type {?} */ onFailedHandshake = (error) => {
                    console.log('ZetaPushConnection::onFailedHandshake', error);
                    // Remove connection status listener
                    handlers.forEach((handler) => {
                        client.removeConnectionStatusListener(handler);
                    });
                    // Reconnect client via weak auth
                    client.connect();
                    // Reject connection
                    reject();
                };
                const /** @type {?} */ onConnectionEstablished = () => {
                    console.log('ZetaPushConnection::onConnectionEstablished');
                    // Remove connection status listener
                    handlers.forEach((handler) => {
                        client.removeConnectionStatusListener(handler);
                    });
                    // Resolve connection success
                    resolve();
                };
                // Handle connection success and fail
                handlers.push(client.onConnectionEstablished(onConnectionEstablished));
                handlers.push(client.onFailedHandshake(onFailedHandshake));
                // Connect client to ZetaPush backend
                client.connect();
            });
        });
    }
}

const ZetaPushClientConfig = new InjectionToken('ZetaPushClientConfig');
/**
 * @param {?} config
 * @return {?}
 */
function ZetaPushClientFactory(config) {
    return new ZetaPushClient(config);
}
/**
 * @param {?} client
 * @return {?}
 */
function ZetaPushConnectionFactory(client) {
    return new ZetaPushConnection(client);
}

class ZetaPushModule {
}
ZetaPushModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [],
                providers: [
                    { provide: ZetaPushClient, useFactory: ZetaPushClientFactory, deps: [ZetaPushClientConfig] },
                    { provide: ZetaPushConnection, useFactory: ZetaPushConnectionFactory, deps: [ZetaPushClient] }
                ],
                bootstrap: []
            },] },
];
/**
 * @nocollapse
 */
ZetaPushModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { Api, createApi, ZetaPushConnection, ZetaPushClient, ZetaPushClientConfig, ZetaPushModule, ZetaPushClientFactory as ɵa, ZetaPushConnectionFactory as ɵb };
//# sourceMappingURL=zetapush-angular.js.map
